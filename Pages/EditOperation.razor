@page "/EditOperation/{Id}"
@using CrudAssignment.Data
@inject OperationService operationService
@inject DeviceService deviceService
@inject NavigationManager NavigationManager

<h2>Edit Operation</h2>
<hr />

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input form="Name" class="form-control" @bind="@obj.Name" />
            </div>
           
            <div class="form-group">
                <label for="Designation" class="control-label">Order</label>
                <input form="Designation" class="form-control" @bind="@obj.OrderInWhichToPerform" />
            </div>
            <div class="form-group">
                <label for="City" class="control-label">ImageData</label>
                <input form="City" class="form-control" @bind="@obj.ImageData" />
            </div>
             <div class="form-group">
                <label for="Device" class="control-label">Select or <a href="/AddDevice">Add Device</a></label>
                
                <select @bind="@obj.Device" class="form-control">
                    @foreach (var d in devicesL)
                    {
                        <option value="@d.DeviceType">@d.Name</option>
                    }
                </select>

            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@UpdateOperation" value="Update" />
                <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {
    [Parameter]
    public string Id { get; set; }
    Operation obj = new Operation();
     public List<Device> devicesL = new List<Device>();
    
    protected override async Task OnInitializedAsync()
    {
        devicesL = await deviceService.GetAllDeviceAsync();
        obj = await Task.Run(() => operationService.GetOperationAsync(Convert.ToInt32(Id)));
    }
    protected async void UpdateOperation()
    {
        await operationService.UpdateOperationAsync(obj);
        NavigationManager.NavigateTo("Operations");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("Operations");
    }
}